package 校门外的树;


import java.util.Scanner;

public class Main {   //思路将数轴上的点都为0，区域内的点改为1（移除树），最后统计数轴上有0的数（剩余树）
	
	/*
    private static int getCount(int b[],int n, int x) {//整个数组变成字符串，统计数组内还有x的个数   如果单独的是判断0或1这种方法不简单
                                                       //不如直接遍历数组直接判断数组是否为0/1.
	int sum = 0;
    String str = "";
    String sToFind = x + "";
    for (int i = 0; i <= n; i++) {
        str = b[i] + str;
    }
    while (str.contains(sToFind)) {
        str = str.substring(str.indexOf(sToFind) + 1);
        sum = sum+1;
    }
    return sum;
} 
   */

	
	public static void main(String[] args) {
		
	  Scanner in = new Scanner (System.in);
	  int L = in.nextInt();
	  int M = in.nextInt();
	  
	  int count = 0;
	  int b[] = new int [10001];   //b[]用于表示数轴上所有点，初始值为0
	                    //51行用了b[10000]所以此处不能为10000要为10001否则数组小越界
	  //int a[] = new int[2*M];      //a[]用于数轴上区域端点  
	
	  for(int i=1;i<=M;i++) {
		 int head =in.nextInt();
		 int tail =in.nextInt();
		 for(int k =head;k<=tail;k++) {
			 b[k]=1;
		 }
	  }
	
	/*  for(int i= 0;i<2*M;i+=2) {
	  for(int k=a[i];k<=a[i+1];k++) {  //区间内的点变为1
		b[k]=1;
	  }
	  }
	  System.out.println(Main.getCount(b, L, 0));
    */ 
	  
	  for(int i=0;i<=L;i++) {
		  if(b[i]==0) {
			count++;
		  }
	  }  
	System.out.println(count);
  }
}
